package com.example.synsoft.managewallet.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.synsoft.managewallet.model.IncomeExpense;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INCOME_EXPENSE".
*/
public class IncomeExpenseDao extends AbstractDao<IncomeExpense, Long> {

    public static final String TABLENAME = "INCOME_EXPENSE";

    /**
     * Properties of entity IncomeExpense.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Value = new Property(1, Double.class, "value", false, "VALUE");
        public final static Property Entry_date = new Property(2, java.util.Date.class, "entry_date", false, "ENTRY_DATE");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property Receipt_photo = new Property(4, String.class, "receipt_photo", false, "RECEIPT_PHOTO");
        public final static Property CategoryId = new Property(5, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property ExpenditureId = new Property(6, Long.class, "expenditureId", false, "EXPENDITURE_ID");
        public final static Property CurrencyId = new Property(7, Long.class, "currencyId", false, "CURRENCY_ID");
    };

    private DaoSession daoSession;

    private Query<IncomeExpense> category_IncomeExpensesQuery;
    private Query<IncomeExpense> expenditureType_IncomeExpensesQuery;
    private Query<IncomeExpense> currency_IncomeExpensesQuery;

    public IncomeExpenseDao(DaoConfig config) {
        super(config);
    }
    
    public IncomeExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INCOME_EXPENSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VALUE\" REAL," + // 1: value
                "\"ENTRY_DATE\" INTEGER," + // 2: entry_date
                "\"NOTE\" TEXT," + // 3: note
                "\"RECEIPT_PHOTO\" TEXT," + // 4: receipt_photo
                "\"CATEGORY_ID\" INTEGER," + // 5: categoryId
                "\"EXPENDITURE_ID\" INTEGER," + // 6: expenditureId
                "\"CURRENCY_ID\" INTEGER);"); // 7: currencyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INCOME_EXPENSE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IncomeExpense entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(2, value);
        }
 
        java.util.Date entry_date = entity.getEntry_date();
        if (entry_date != null) {
            stmt.bindLong(3, entry_date.getTime());
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        String receipt_photo = entity.getReceipt_photo();
        if (receipt_photo != null) {
            stmt.bindString(5, receipt_photo);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(6, categoryId);
        }
 
        Long expenditureId = entity.getExpenditureId();
        if (expenditureId != null) {
            stmt.bindLong(7, expenditureId);
        }
 
        Long currencyId = entity.getCurrencyId();
        if (currencyId != null) {
            stmt.bindLong(8, currencyId);
        }
    }

    @Override
    protected void attachEntity(IncomeExpense entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IncomeExpense readEntity(Cursor cursor, int offset) {
        IncomeExpense entity = new IncomeExpense( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // value
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // entry_date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // receipt_photo
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // categoryId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // expenditureId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // currencyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IncomeExpense entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setEntry_date(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReceipt_photo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategoryId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setExpenditureId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCurrencyId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IncomeExpense entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IncomeExpense entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "incomeExpenses" to-many relationship of Category. */
    public List<IncomeExpense> _queryCategory_IncomeExpenses(Long categoryId) {
        synchronized (this) {
            if (category_IncomeExpensesQuery == null) {
                QueryBuilder<IncomeExpense> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                category_IncomeExpensesQuery = queryBuilder.build();
            }
        }
        Query<IncomeExpense> query = category_IncomeExpensesQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    /** Internal query to resolve the "incomeExpenses" to-many relationship of ExpenditureType. */
    public List<IncomeExpense> _queryExpenditureType_IncomeExpenses(Long expenditureId) {
        synchronized (this) {
            if (expenditureType_IncomeExpensesQuery == null) {
                QueryBuilder<IncomeExpense> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ExpenditureId.eq(null));
                expenditureType_IncomeExpensesQuery = queryBuilder.build();
            }
        }
        Query<IncomeExpense> query = expenditureType_IncomeExpensesQuery.forCurrentThread();
        query.setParameter(0, expenditureId);
        return query.list();
    }

    /** Internal query to resolve the "incomeExpenses" to-many relationship of Currency. */
    public List<IncomeExpense> _queryCurrency_IncomeExpenses(Long currencyId) {
        synchronized (this) {
            if (currency_IncomeExpensesQuery == null) {
                QueryBuilder<IncomeExpense> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CurrencyId.eq(null));
                currency_IncomeExpensesQuery = queryBuilder.build();
            }
        }
        Query<IncomeExpense> query = currency_IncomeExpensesQuery.forCurrentThread();
        query.setParameter(0, currencyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getExpenditureTypeDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCurrencyDao().getAllColumns());
            builder.append(" FROM INCOME_EXPENSE T");
            builder.append(" LEFT JOIN CATEGORY T0 ON T.\"CATEGORY_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN EXPENDITURE_TYPE T1 ON T.\"EXPENDITURE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN CURRENCY T2 ON T.\"CURRENCY_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected IncomeExpense loadCurrentDeep(Cursor cursor, boolean lock) {
        IncomeExpense entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        ExpenditureType expenditureType = loadCurrentOther(daoSession.getExpenditureTypeDao(), cursor, offset);
        entity.setExpenditureType(expenditureType);
        offset += daoSession.getExpenditureTypeDao().getAllColumns().length;

        Currency currency = loadCurrentOther(daoSession.getCurrencyDao(), cursor, offset);
        entity.setCurrency(currency);

        return entity;    
    }

    public IncomeExpense loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<IncomeExpense> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<IncomeExpense> list = new ArrayList<IncomeExpense>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<IncomeExpense> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<IncomeExpense> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
